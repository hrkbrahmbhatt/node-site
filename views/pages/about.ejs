<html>
<head>
<style>
  body {
    background: white;
    display: -webkit-flex;
    -webkit-justify-content: center;
    -webkit-align-items: center;
    -webkit-flex-direction: column;
  }
  video {
    width: 480px;
    height: 360px;
    border: 1px solid #e2e2e2;
    box-shadow: 0 1px 1px rgba(0,0,0,0.2);
  }
</style>
</head>
<body>
  <div>
    <video id="video" autoplay></video>
    <video id="autovideo" autoplay></video>
    <a id="link"></a>

  </div>
  <p>
    <button id="start">Start</button>
    <button id="cancel">Cancel</button>
    <button id="startFromBackgroundPage">Start from background page</button>
  </p>
  <script>
  let extensionInstalled = false;

  document.getElementById('start').addEventListener('click', () => {
    // send screen-sharer request to content-script
    if (!extensionInstalled) {
      alert(
        'Please install the extension:\n' +
          '1. Go to chrome://extensions\n' +
          '2. Check: "Enable Developer mode"\n' +
          '3. Click: "Load the unpacked extension..."\n' +
          '4. Choose "extension" folder from the repository\n' +
          '5. Reload this page'
      );
    }
    window.postMessage({ type: 'SS_UI_REQUEST', text: 'start' }, '*');
  });

  // listen for messages from the content-script
  window.addEventListener('message', event => {
    const { data: { type, streamId }, origin } = event;

    // NOTE: you should discard foreign events
    if (origin !== window.location.origin) {
      console.warn(
        'ScreenStream: you should discard foreign event from origin:',
        origin
      );
      // return;
    }

    // content-script will send a 'SS_PING' msg if extension is installed
    if (type === 'SS_PING') {
      extensionInstalled = true;
    }

    // user chose a stream
    if (type === 'SS_DIALOG_SUCCESS') {
      startScreenStreamFrom(streamId);
    }

    // user clicked on 'cancel' in choose media dialog
    if (type === 'SS_DIALOG_CANCEL') {

      var constraints = { video: { mediaSource: "screen", width: 320, height: 200 } };

      var start = ms => navigator.mediaDevices.getUserMedia(constraints)
        .then(stream => record(stream, ms)
          .then(recording => {
            stop(stream);
            autovideo.src = link.href = URL.createObjectURL(new Blob(recording));
            link.download = "recording.webm";
            link.innerHTML = "Download blob";
            log("Playing "+ recording[0].type +" recording:");
          })
          .catch(log).then(() => stop(stream)))
        .catch(log);

      var record = (stream, ms) => {
        var rec = new MediaRecorder(stream), data = [];
        rec.ondataavailable = e => data.push(e.data);
        rec.start();
        log(rec.state + " for "+ (ms / 1000) +" seconds...");
        var stopped = new Promise((r, e) => (rec.onstop = r, rec.onerror = e));
        return Promise.all([stopped, wait(ms).then(() => rec.stop())])
          .then(() => data);
      };

      var stop = stream => stream.getTracks().forEach(track => track.stop());
      var wait = ms => new Promise(resolve => setTimeout(resolve, ms));
      var log = msg => div.innerHTML += "<br>" + msg;

    }
  });

  function startScreenStreamFrom(streamId) {
    navigator.mediaDevices
      .getUserMedia({
        audio: false,
        video: {
          mandatory: {
            chromeMediaSource: 'desktop',
            chromeMediaSourceId: streamId,
            maxWidth: window.screen.width,
            maxHeight: window.screen.height
          }
        }
      })
      .then(stream => {
        videoElement = document.getElementById('video');
        videoElement.srcObject = stream;
      })
      .catch(console.error);
  }
</script>

</body>
</html>
